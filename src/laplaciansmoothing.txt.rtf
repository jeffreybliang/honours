{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red23\green23\blue23;\red140\green211\blue254;
\red167\green197\blue152;\red183\green111\blue179;\red67\green192\blue160;\red212\green214\blue154;\red70\green137\blue204;
\red194\green126\blue101;\red89\green138\blue67;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c11765\c11765\c11765;\cssrgb\c61176\c86275\c99608;
\cssrgb\c70980\c80784\c65882;\cssrgb\c77255\c52549\c75294;\cssrgb\c30588\c78824\c69020;\cssrgb\c86275\c86275\c66667;\cssrgb\c33725\c61176\c83922;
\cssrgb\c80784\c56863\c47059;\cssrgb\c41569\c60000\c33333;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf4 \strokec4 w_laplacian\cf2 \strokec2  = \cf5 \strokec5 1e5\cf2 \cb1 \strokec2 \
\cb3     \cf6 \strokec6 for\cf2 \strokec2  \cf4 \strokec4 i\cf2 \strokec2  \cf6 \strokec6 in\cf2 \strokec2  \cf7 \strokec7 range\cf2 \strokec2 (\cf4 \strokec4 n_iters\cf2 \strokec2 ):\cb1 \
\cb3         \cf4 \strokec4 optimiser\cf2 \strokec2 .\cf8 \strokec8 zero_grad\cf2 \strokec2 (\cf4 \strokec4 set_to_none\cf2 \strokec2 =\cf9 \strokec9 True\cf2 \strokec2 )\cb1 \
\cb3         \cf4 \strokec4 projverts\cf2 \strokec2  = \cf7 \strokec7 ConstrainedProjectionFunction\cf2 \strokec2 .\cf8 \strokec8 apply\cf2 \strokec2 (\cf4 \strokec4 node\cf2 \strokec2 , \cf4 \strokec4 verts\cf2 \strokec2 )\cb1 \
\cb3         \cf4 \strokec4 history\cf2 \strokec2 .\cf8 \strokec8 append\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 .detach().clone())\cb1 \
\cb3         \cf4 \strokec4 loss_chamfer\cf2 \strokec2  = \cf4 \strokec4 chamfer_loss\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 )\cb1 \
\cb3         \cf4 \strokec4 tmp_mesh\cf2 \strokec2  = \cf7 \strokec7 Meshes\cf2 \strokec2 (\cf4 \strokec4 verts\cf2 \strokec2 =\cf4 \strokec4 projverts\cf2 \strokec2 .float(), \cf4 \strokec4 faces\cf2 \strokec2 =\cf4 \strokec4 src\cf2 \strokec2 .\cf8 \strokec8 faces_padded\cf2 \strokec2 ())\cb1 \
\cb3         \cf4 \strokec4 loss_laplacian\cf2 \strokec2  = \cf8 \strokec8 mesh_laplacian_smoothing\cf2 \strokec2 (\cf4 \strokec4 tmp_mesh\cf2 \strokec2 ,\cf4 \strokec4 method\cf2 \strokec2 =\cf10 \strokec10 "uniform"\cf2 \strokec2 ).\cf8 \strokec8 double\cf2 \strokec2 ()\cb1 \
\cb3         \cf4 \strokec4 loss\cf2 \strokec2  = \cf4 \strokec4 loss_chamfer\cf2 \strokec2  + \cf4 \strokec4 w_laplacian\cf2 \strokec2  * \cf4 \strokec4 loss_laplacian\cf2 \cb1 \strokec2 \
\cb3         \cf4 \strokec4 colour\cf2 \strokec2  = \cf7 \strokec7 bcolors\cf2 \strokec2 .\cf4 \strokec4 FAIL\cf2 \cb1 \strokec2 \
\cb3         \cf6 \strokec6 if\cf2 \strokec2  \cf4 \strokec4 loss\cf2 \strokec2 .item() < \cf4 \strokec4 min_loss\cf2 \strokec2 :\cb1 \
\cb3             \cf4 \strokec4 min_loss\cf2 \strokec2  = \cf4 \strokec4 loss\cf2 \strokec2 .item()\cb1 \
\cb3             \cf4 \strokec4 best_verts\cf2 \strokec2  = \cf4 \strokec4 projverts\cf2 \strokec2 .detach().clone()\cb1 \
\cb3             \cf4 \strokec4 colour\cf2 \strokec2  = \cf7 \strokec7 bcolors\cf2 \strokec2 .\cf4 \strokec4 OKGREEN\cf2 \cb1 \strokec2 \
\cb3         \cf4 \strokec4 loss\cf2 \strokec2 .backward()\cb1 \
\cb3         \cf4 \strokec4 optimiser\cf2 \strokec2 .\cf8 \strokec8 step\cf2 \strokec2 ()\cb1 \
\cb3         \cf6 \strokec6 if\cf2 \strokec2  \cf4 \strokec4 verbose\cf2 \strokec2 :\cb1 \
\cb3             \cf11 \strokec11 # print(f"\{i:4d\} Loss: \{loss.item()\} Gradient: \{verts.grad\}")\cf2 \cb1 \strokec2 \
\cb3             \cf11 \strokec11 # SSE: \{(torch.norm(projverts - verts_init)**2).sum()\} Chamfer: \{chamfer_distance(projverts.float(),verts_init.float())[0].sum()\}\cf2 \cb1 \strokec2 \
\cb3             \cf8 \strokec8 print\cf2 \strokec2 (\cf9 \strokec9 f\cf10 \strokec10 "\cf9 \strokec9 \{\cf4 \strokec4 i\cf9 \strokec9 :4d\}\cf10 \strokec10  Loss: \cf9 \strokec9 \{\cf4 \strokec4 colour\cf9 \strokec9 \}\{\cf4 \strokec4 loss\cf2 \strokec2 .item()\cf9 \strokec9 :.3f\}\cf10 \strokec10  \cf9 \strokec9 \{\cf4 \strokec4 loss_chamfer\cf2 \strokec2 .item()\cf9 \strokec9 :.3f\}\cf10 \strokec10  \cf9 \strokec9 \{\cf4 \strokec4 w_laplacian\cf2 \strokec2  * \cf4 \strokec4 loss_laplacian\cf2 \strokec2 .\cf8 \strokec8 item\cf2 \strokec2 ()\cf9 \strokec9 :.3f\}\cf10 \strokec10  \cf9 \strokec9 \{\cf7 \strokec7 bcolors\cf2 \strokec2 .\cf4 \strokec4 ENDC\cf9 \strokec9 \}\cf10 \strokec10  Volume: \cf9 \strokec9 \{\cf8 \strokec8 calculate_volume\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 [\cf5 \strokec5 0\cf2 \strokec2 ], \cf4 \strokec4 src\cf2 \strokec2 [\cf5 \strokec5 0\cf2 \strokec2 ].\cf8 \strokec8 faces_packed\cf2 \strokec2 ())\cf9 \strokec9 :.3f\}\cf10 \strokec10 "\cf2 \strokec2 )\cb1 \
\cb3             \cf8 \strokec8 print\cf2 \strokec2 (\cf9 \strokec9 f\cf10 \strokec10 "GT Chamfer: [\cf9 \strokec9 \{\cf10 \strokec10 ', '\cf2 \strokec2 .\cf8 \strokec8 join\cf2 \strokec2 (\cf9 \strokec9 f\cf10 \strokec10 '\cf9 \strokec9 \{\cf4 \strokec4 x\cf9 \strokec9 :.3f\}\cf10 \strokec10 '\cf2 \strokec2  \cf6 \strokec6 for\cf2 \strokec2  \cf4 \strokec4 x\cf2 \strokec2  \cf6 \strokec6 in\cf2 \strokec2  \cf8 \strokec8 chamfer_gt\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 , \cf4 \strokec4 src\cf2 \strokec2 , \cf4 \strokec4 tgt\cf2 \strokec2 ))\cf9 \strokec9 \}\cf10 \strokec10 ] "\cf2 \cb1 \strokec2 \
\cb3                 \cf9 \strokec9 f\cf10 \strokec10 "GT SSE: [\cf9 \strokec9 \{\cf10 \strokec10 ', '\cf2 \strokec2 .\cf8 \strokec8 join\cf2 \strokec2 (\cf9 \strokec9 f\cf10 \strokec10 '\cf9 \strokec9 \{\cf4 \strokec4 x\cf9 \strokec9 :.3f\}\cf10 \strokec10 '\cf2 \strokec2  \cf6 \strokec6 for\cf2 \strokec2  \cf4 \strokec4 x\cf2 \strokec2  \cf6 \strokec6 in\cf2 \strokec2  \cf8 \strokec8 sse_gt\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 , \cf4 \strokec4 src\cf2 \strokec2 , \cf4 \strokec4 tgt\cf2 \strokec2 ))\cf9 \strokec9 \}\cf10 \strokec10 ] "\cf2 \cb1 \strokec2 \
\cb3                 \cf9 \strokec9 f\cf10 \strokec10 "GT IoU: [\cf9 \strokec9 \{\cf10 \strokec10 ', '\cf2 \strokec2 .\cf8 \strokec8 join\cf2 \strokec2 (\cf9 \strokec9 f\cf10 \strokec10 '\cf9 \strokec9 \{\cf4 \strokec4 x\cf9 \strokec9 :.3f\}\cf10 \strokec10 '\cf2 \strokec2  \cf6 \strokec6 for\cf2 \strokec2  \cf4 \strokec4 x\cf2 \strokec2  \cf6 \strokec6 in\cf2 \strokec2  \cf8 \strokec8 iou_gt\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 , \cf4 \strokec4 src\cf2 \strokec2 , \cf4 \strokec4 tgt\cf2 \strokec2 ))\cf9 \strokec9 \}\cf10 \strokec10 ]"\cf2 \strokec2 )\cb1 \
\cb3             \cf6 \strokec6 if\cf2 \strokec2  \cf4 \strokec4 i\cf2 \strokec2  % \cf5 \strokec5 50\cf2 \strokec2  == \cf5 \strokec5 49\cf2 \strokec2 :\cb1 \
\cb3                 \cf8 \strokec8 plot_projections\cf2 \strokec2 (\cf4 \strokec4 projverts\cf2 \strokec2 .detach().squeeze().double(), \cf4 \strokec4 projmats\cf2 \strokec2 , (\cf4 \strokec4 a\cf2 \strokec2 ,\cf4 \strokec4 b\cf2 \strokec2 ))\cb1 \
\cb3     \cf6 \strokec6 return\cf2 \strokec2  \cf4 \strokec4 best_verts\cf2 \cb1 \strokec2 \
}